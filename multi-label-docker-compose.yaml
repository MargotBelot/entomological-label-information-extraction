# docker-compose.yaml
# This file defines a multi-stage Docker Compose setup for processing entomological label information extraction.
# It includes services for detection, classification, OCR processing, and post-processing of data.
# Each service is built from a specific Dockerfile and has its own command to execute.
# The services are designed to run sequentially, with dependencies defined to ensure that each step completes successfully before the next one starts.
# The volumes are mounted to share data between the host and the containers, allowing for input and output data to be processed and stored in a structured manner.
# The `shm_size` is set to 2GB for the detection service to handle large image processing tasks efficiently.
# The final output is stored in the `data/MLI/output` directory,
# which can be accessed after the pipeline completes.

services:
  detection:
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: pipelines/segmentation.dockerfile
    shm_size: 2g
    volumes:
      - ./data/MLI/input:/input
      - ./data/MLI/output:/output
    command: python3 scripts/processing/detection.py -j /input -o /output

  empty_not_empty_classifier:
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: pipelines/empty_labels.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/analysis.py -o data/MLI/output -i data/MLI/output/input_cropped
    depends_on:
      detection:
        condition: service_completed_successfully

  nuri_notnuri_classifier:
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    image: classification
    build: 
      context: .
      dockerfile: pipelines/classification.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/classifiers.py -m 1 -j data/MLI/output/not_empty -o data/MLI/output
    depends_on:
      empty_not_empty_classifier:
        condition: service_completed_successfully

  handwritten_printed_classifier:
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    image: classification
    build: 
      context: .
      dockerfile: pipelines/classification.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/classifiers.py -m 2 -j data/MLI/output/not_identifier -o data/MLI/output
    depends_on:
      nuri_notnuri_classifier:
        condition: service_completed_successfully

  tesseract:
    stdin_open: true
    tty: true
    image: tesseract
    build: 
      context: .
      dockerfile: pipelines/tesseract.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/tesseract.py -d data/MLI/output/printed -o data/MLI/output
    depends_on:
      handwritten_printed_classifier:
        condition: service_completed_successfully

  postprocessing:
    stdin_open: true
    tty: true
    image: postprocessing
    build: 
      context: .
      dockerfile: pipelines/postprocessing.dockerfile
    volumes:
      - ./data:/app/data
    command: >
      bash -c "python3 scripts/postprocessing/process.py -j data/MLI/output/ocr_preprocessed.json -o data/MLI/output && echo 'Pipeline complete! Final output is in data/MLI/output'"
    depends_on:
      tesseract:
        condition: service_completed_successfully
