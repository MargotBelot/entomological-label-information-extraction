# Single-Label Docker Compose Pipeline
# 
# This file defines a complete multi-stage Docker Compose setup for processing 
# pre-cropped entomological label images. It includes:
#
# 1. Empty/Not-Empty Classification: Filter out empty labels
# 2. Identifier/Description Classification: Separate identifier vs descriptive labels  
# 3. Handwritten/Printed Classification: Classify text type
# 4. Rotation Correction: Correct text orientation for better OCR
# 5. OCR Processing: Extract text using Tesseract
# 6. Post-processing: Clean and process extracted text
# 7. Consolidation: Link all results into comprehensive JSON output
#
# The pipeline processes pre-cropped images in ./data/SLI/input and outputs results to ./data/SLI/output
# Final consolidated results are available in ./data/SLI/output/consolidated_results.json

services:
  empty_not_empty_classifier:
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: pipelines/empty_labels.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/analysis.py -o data/SLI/output -i data/SLI/input
    environment:
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD-SHELL", "ls data/SLI/output/not_empty || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  nuri_notnuri_classifier:
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: pipelines/classification.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/classifiers.py -m 1 -j data/SLI/output/not_empty -o data/SLI/output
    environment:
      - PYTHONPATH=/app
    depends_on:
      empty_not_empty_classifier:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "ls data/SLI/output/not_identifier || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  handwritten_printed_classifier:
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: pipelines/classification.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/classifiers.py -m 2 -j data/SLI/output/not_identifier -o data/SLI/output
    environment:
      - PYTHONPATH=/app
    depends_on:
      nuri_notnuri_classifier:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "ls data/SLI/output/printed || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  rotator:
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: pipelines/rotation.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/rotation.py -o data/SLI/output/rotated -i data/SLI/output/printed
    environment:
      - PYTHONPATH=/app
    depends_on:
      handwritten_printed_classifier:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "ls data/SLI/output/rotated || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  tesseract:
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: pipelines/tesseract.dockerfile
    volumes:
      - ./data:/app/data
    command: python3 scripts/processing/tesseract.py -d data/SLI/output/rotated -o data/SLI/output
    environment:
      - PYTHONPATH=/app
    depends_on:
      rotator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "ls data/SLI/output/ocr_preprocessed.json || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postprocessing:
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: pipelines/postprocessing.dockerfile
    volumes:
      - ./data:/app/data
    command: >
      bash -c "
        echo 'Starting post-processing pipeline...' &&
        python3 scripts/postprocessing/process.py -j data/SLI/output/ocr_preprocessed.json -o data/SLI/output &&
        echo 'Consolidating all pipeline results...' &&
        python3 scripts/postprocessing/consolidate_results.py -o data/SLI/output -f consolidated_results.json &&
        echo 'SUCCESS: Single-label pipeline completed successfully!' &&
        echo 'Results available in: data/SLI/output/' &&
        echo 'Consolidated results: data/SLI/output/consolidated_results.json'
      "
    environment:
      - PYTHONPATH=/app
    depends_on:
      tesseract:
        condition: service_completed_successfully
