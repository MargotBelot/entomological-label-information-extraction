name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr libzbar0 libgl1-mesa-glx libglib2.0-0
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        # Set environment variables for CPU-only TensorFlow
        export TF_CPP_MIN_LOG_LEVEL=2
        export CUDA_VISIBLE_DEVICES=""
        pip install -e .
        pip install pytest pytest-cov flake8 black
      env:
        TF_CPP_MIN_LOG_LEVEL: 2
        CUDA_VISIBLE_DEVICES: ""
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        # Skip formatting check for now - focus on functionality first
        echo "Skipping code formatting check for initial setup"
    
    - name: Run tests with pytest
      run: |
        # Set environment variables for testing
        export TF_CPP_MIN_LOG_LEVEL=2
        export CUDA_VISIBLE_DEVICES=""
        # Skip tests that require model files if they don't exist
        pytest unit_tests/ -v --cov=. --cov-report=xml --cov-report=html --tb=short
      env:
        TF_CPP_MIN_LOG_LEVEL: 2
        CUDA_VISIBLE_DEVICES: ""
        PYTHONPATH: .
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: false
